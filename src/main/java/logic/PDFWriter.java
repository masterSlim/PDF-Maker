package logic;

import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.utils.PdfMerger;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;

import java.awt.*;
import java.io.File;
import java.io.IOException;

public class PDFWriter implements Writer {
    private final Document doc;
    private final String outputName;
    private final String firstPartPath;
    private final String secondPartPath;
    private String directory;
    private final String tempPath;
    private final PdfDocument pdfDoc;
    private PdfFont fontRegular;
    private PdfFont fontLight;
    private PdfFont fontBold;
    private PdfFont fontExtraBold;
    private int fontSizeM;
    private int fontSizeL;

    public PDFWriter(String filePath, String firstPartPath, String secondPartPath) throws IOException {
        this.firstPartPath = firstPartPath;
        tempPath = "temp.pdf";
        this.secondPartPath = secondPartPath;
        this.outputName = filePath + "AutoGenerated.pdf";
        this.pdfDoc = new PdfDocument(new PdfReader(firstPartPath), new PdfWriter(outputName));
        this.doc = new Document(pdfDoc);
        initFonts();
    }

    public PDFWriter() throws IOException {
        this.firstPartPath = "Sources\\test first part.pdf";
        this.secondPartPath = "Sources\\test second part.pdf";
        tempPath = "temp.pdf";
        this.outputName = "Презентация.pdf";
        this.pdfDoc = new PdfDocument(new PdfReader(secondPartPath), new PdfWriter(tempPath));
        this.doc = new Document(pdfDoc);
        initFonts();
    }

    private void initFonts() throws IOException {
        fontLight = PdfFontFactory.createFont("fonts/OpenSans-Light_0.ttf", "Identity-H", true);
        fontRegular = PdfFontFactory.createFont("fonts/OpenSans-Regular_0.ttf", "Identity-H", true);
        fontBold = PdfFontFactory.createFont("fonts/OpenSans-Bold_0.ttf", "Identity-H", true);
        fontExtraBold = PdfFontFactory.createFont("fonts/OpenSans-Bold_0.ttf", "Identity-H", true);
        fontSizeM = 20;
        fontSizeL = 30;
    }

    public boolean write(Information info) {
        //берём полученую проверенную информацию и записываем в файл. По окончании возвращаем true в случае успеха и false при неудаче
        //TODO добавить ко всем объектам Paragraph шрифт, размер, позицию на странице

        directory = new String(info.getSurname()+ " " + info.getName());
        //создание и настройка строки c полным именем
        //слияние имени и фамилии в одну строку
        String fullName = info.getName() + " " + info.getSurname();
        Paragraph fullNamePar = new Paragraph(fullName);
        fullNamePar.setFont(fontBold);
        fullNamePar.setFontSize(fontSizeL);

        //создание и настройка строки с должностью
        Paragraph positionPar = new Paragraph(info.getPosition());
        positionPar.setFont(fontRegular);
        positionPar.setFontSize(fontSizeM);

        //создание и настройка строки с номером телефона
        //TODO сделать проверку номера на пул номеров компании
        Paragraph phonePar = new Paragraph(info.getPhone());
        phonePar.setFont(fontRegular);
        phonePar.setFontSize(fontSizeM);

        //создание и настройка строки с электронной почтой
        //TODO сделать проверку почты на соответствие домену компании
        Paragraph emailPar = new Paragraph(info.getEmail());
        emailPar.setFont(fontRegular);
        emailPar.setFontSize(fontSizeM);

        //размещение созданных строк в документе
        try {
            doc.add(positionPar.setFixedPosition(92, 435, 500));
            doc.add(fullNamePar.setFixedPosition(92, 391, 500));
            doc.add(emailPar.setFixedPosition(92, 336, 500));
            doc.add(phonePar.setFixedPosition(92, 295, 500));

            //если указан скайп, то создаётся, настраивается и размещется в документе строка со скайпом
            // TODO возможно, стоит сделать проверку на пустой объект не в этом месте
            if (info.getSkype() != null) {
                Paragraph skypePar = new Paragraph(info.getSkype());
                skypePar.setFont(fontRegular);
                skypePar.setFontSize(fontSizeM);
                doc.add(skypePar.setFixedPosition(92, 254, 500));
            }

            //если указан ICQ, то создаётся, настраивается и размещется в документе строка с ICQ
            //TODO возможно, стоит сделать проверку на пустой объект не в этом месте
            if (info.getIcq() != null) {
                Paragraph icqPar = new Paragraph(info.getIcq());
                icqPar.setFont(fontRegular);
                icqPar.setFontSize(fontSizeM);
                doc.add(icqPar.setFixedPosition(92, 213, 500));
            }

            //закрытие документа

            pdfDoc.close();
            doc.close();
            merge();
            File temp = new File(tempPath);
            temp.delete();
            System.out.println("Successfully written in file " + outputName);

            return true;

        } catch (Exception e) {
            e.printStackTrace();
            pdfDoc.close();
            doc.close();
            return false;

        } finally {
            pdfDoc.close();
            doc.close();
        }

    }

    /**
     * Метод соединяет полученную страницу сохранённую во временном файле с остальной презентацией,
     * создаёт папку с именем и фамилией введёнными пользователем и открывает папку эту папку
     * @throws IOException
     */

    private void merge() throws IOException {
        PdfDocument inputPdf = new PdfDocument(new PdfReader(tempPath));
        File newDirectory = new File(directory);
        newDirectory.mkdir();
        PdfDocument outputPdf = new PdfDocument(new PdfReader(firstPartPath), new PdfWriter(directory +"\\"+ outputName));
        Document merged = new Document(outputPdf);
        PdfMerger merger = new PdfMerger(outputPdf);
        merger.merge(inputPdf, 1,1);
        Desktop.getDesktop().open(newDirectory);
        inputPdf.close();
        outputPdf.close();
        merged.close();
    }

    public String getFilePath() {
        return outputName;
    }
}
